/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import java.math.BigDecimal;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author clara
 */
public class VentanaCarrito extends javax.swing.JDialog {

    /**
     * Creates new form VentanaCarrito
     */
    private static final DefaultListModel<String> listModel = new DefaultListModel<>();
    private static final HashMap<String, Integer> productosCarrito = new HashMap<>();
    private PanelPrincipal panelMain;

    public VentanaCarrito(PanelPrincipal parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(panelMain);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCarrito = new javax.swing.JList<>();
        jBtnPagar = new javax.swing.JButton();
        jBtnVaciar = new javax.swing.JButton();
        jBtnVolver = new javax.swing.JButton();
        jBtnEliminarSeleccionado = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Wok & Roll - Carrito");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Carrito actual:");

        jListCarrito.setBackground(new java.awt.Color(51, 51, 51));
        jListCarrito.setForeground(new java.awt.Color(255, 255, 255));
        jListCarrito.setModel(listModel);
        jScrollPane1.setViewportView(jListCarrito);

        jBtnPagar.setBackground(new java.awt.Color(204, 255, 204));
        jBtnPagar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnPagar.setText("PAGAR");
        jBtnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPagarActionPerformed(evt);
            }
        });

        jBtnVaciar.setBackground(new java.awt.Color(204, 255, 204));
        jBtnVaciar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnVaciar.setText("VACIAR CARRITO");
        jBtnVaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVaciarActionPerformed(evt);
            }
        });

        jBtnVolver.setBackground(new java.awt.Color(204, 255, 204));
        jBtnVolver.setForeground(new java.awt.Color(0, 0, 0));
        jBtnVolver.setText("VOLVER");
        jBtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVolverActionPerformed(evt);
            }
        });

        jBtnEliminarSeleccionado.setBackground(new java.awt.Color(204, 255, 204));
        jBtnEliminarSeleccionado.setForeground(new java.awt.Color(0, 0, 0));
        jBtnEliminarSeleccionado.setText("QUITAR DEL CARRITO");
        jBtnEliminarSeleccionado.setToolTipText("Elimina el artículo seleccionado");
        jBtnEliminarSeleccionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarSeleccionadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtnEliminarSeleccionado)
                            .addComponent(jBtnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnVolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnVaciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnVaciar)
                    .addComponent(jBtnEliminarSeleccionado))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnPagar)
                    .addComponent(jBtnVolver))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public static void agregarProducto(String nombreProducto, BigDecimal precioConIVA, int cantidad) {
        String claveProducto = nombreProducto + " - Precio unitario: "
                + String.format("%.2f", precioConIVA);

        if (productosCarrito.containsKey(claveProducto)) {
            int cantidadActual = productosCarrito.get(claveProducto);
            int nuevaCantidad = cantidadActual + cantidad;
            productosCarrito.put(claveProducto, nuevaCantidad);

            for (int i = 0; i < listModel.size(); i++) {
                String elemento = listModel.get(i);
                if (elemento.startsWith(nombreProducto)) {
                    BigDecimal precioTotal = precioConIVA.multiply(new BigDecimal(nuevaCantidad));
                    listModel.set(i, String.format("%s "
                            + "- Cantidad: %d "
                            + "- Precio total: %.2f",
                            nombreProducto, nuevaCantidad, precioTotal));
                    break;
                }
            }
        } else {
            productosCarrito.put(claveProducto, cantidad);
            BigDecimal precioTotal = precioConIVA.multiply(new BigDecimal(cantidad));
            listModel.addElement(String.format("%s - Cantidad: %d "
                    + "- Precio total: %.2f", nombreProducto, cantidad, precioTotal));
        }
    }


    private void jBtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVolverActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtnVolverActionPerformed

    private void jBtnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPagarActionPerformed
        // TODO add your handling code here:
        //si la lista está vacía 
        if (listModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El carrito está vacío...");
            return;
        }//sino lo está accedemos a la ventana de pago
        new VentanaPagar(panelMain, true).setVisible(true);
    }//GEN-LAST:event_jBtnPagarActionPerformed

    private void jBtnVaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVaciarActionPerformed
        // TODO add your handling code here:
        listModel.clear();
        productosCarrito.clear();
    }//GEN-LAST:event_jBtnVaciarActionPerformed

    private void jBtnEliminarSeleccionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarSeleccionadoActionPerformed
        // TODO add your handling code here:
        //si seleccionamos un item de la lista lo borramos
        //sin necesidad de borrar toda la lista
        int selectedIndex = jListCarrito.getSelectedIndex();
        if (selectedIndex != -1) {
            String selectedItem = listModel.getElementAt(selectedIndex);
            listModel.removeElementAt(selectedIndex);

            //actualiza el map
            String[] partes = selectedItem.split(" - ");
            String claveProducto = partes[0] + " - " + partes[1];
            productosCarrito.remove(claveProducto);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar.");
        }
    }//GEN-LAST:event_jBtnEliminarSeleccionadoActionPerformed
    
    //método get para poder llamar al carrito desde otras ventanas
    public static HashMap<String, Integer> getProductosCarrito() {
        return productosCarrito;
    }
    //método para borrar el contenido del carrito desde otras ventanas
    public static void vaciarCarrito() {
        listModel.clear();
        productosCarrito.clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnEliminarSeleccionado;
    private javax.swing.JButton jBtnPagar;
    private javax.swing.JButton jBtnVaciar;
    private javax.swing.JButton jBtnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListCarrito;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
