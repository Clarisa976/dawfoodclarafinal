/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Dialog.java to edit this template
 */
package views;

import controllers.TicketsJpaController;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import models.ModeloTablaTickets;
import models.Tickets;

/**
 *
 * @author clara
 */
public class VentanaConsultaVentas extends java.awt.Dialog {

    /**
     * Creates new form VentanaConsultaVentas
     */
    private static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("daw_dawfoodclarafinal_jar_finalPU");
    private static final TicketsJpaController tjc = new TicketsJpaController(emf);
    private PanelPrincipal panelMain;

    public VentanaConsultaVentas(PanelPrincipal parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cargarDatosJTable();
        setLocationRelativeTo(panelMain);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBtnComprobar = new javax.swing.JButton();
        jBtnVolver = new javax.swing.JButton();

        setResizable(false);
        setTitle("Wok & Roll - Consulta de ventas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jTable1.setBackground(new java.awt.Color(51, 51, 51));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(102, 102, 102));
        jTable1.setSelectionForeground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setViewportView(jTable1);

        jBtnComprobar.setBackground(new java.awt.Color(204, 255, 204));
        jBtnComprobar.setForeground(new java.awt.Color(0, 0, 0));
        jBtnComprobar.setText("COMPROBAR");
        jBtnComprobar.setToolTipText("Ver en detalle el ticket seleccionado");
        jBtnComprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnComprobarActionPerformed(evt);
            }
        });

        jBtnVolver.setBackground(new java.awt.Color(204, 255, 204));
        jBtnVolver.setForeground(new java.awt.Color(0, 0, 0));
        jBtnVolver.setText("VOLVER");
        jBtnVolver.setToolTipText("Volver a la ventana anterior");
        jBtnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jBtnComprobar)
                .addGap(403, 403, 403)
                .addComponent(jBtnVolver)
                .addContainerGap(325, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtnComprobar, jBtnVolver});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnComprobar)
                    .addComponent(jBtnVolver))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Este método inserta los datos de la lista en el jtable
    private void cargarDatosJTable() {

        // Se crea el modelo de datos que contendrá el JTable
        // Este modelo se rellena de datos y luego se asocia al JTable
        ModeloTablaTickets modelo = new ModeloTablaTickets();

        // Array de object con el número de columnas del jtable
        // Para guardar cada campo de cada Persona de la lista
        Object[] fila = new Object[modelo.getColumnCount()];

        //obtenemos los datos de la base de datos
        EntityManager em = emf.createEntityManager();

        try {
            List<Tickets> ticketsList = em.createNamedQuery("Tickets.findAll", Tickets.class
            ).getResultList();

            // Depuración: verificar si se obtuvieron productos
            if (ticketsList.isEmpty()) {
                System.out.println("No se encontraron productos en la base de datos.");
            } else {
                System.out.println("Número de productos encontrados: " + ticketsList.size());
            }

            // Añadir los datos al modelo de la tabla
            for (Tickets ticket : ticketsList) {
                fila[0] = ticket.getIdTicket();
                fila[1] = ticket.getIdTicket();
                fila[2] = ticket.getNumeroPedido();
                fila[3] = ticket.getCodTransaccion();
                fila[4] = formatearFecha(ticket.getFechaOperacion());
                fila[5] = formatearHora(ticket.getHoraOperacion());
                fila[6] = ticket.getImporteTotal();

                modelo.addRow(fila);
            }
        } catch (Exception e) {
            // Depuración: imprimir la pila de errores si ocurre una excepción
            e.printStackTrace();
        } finally {
            em.close();
            //si lo cerramos peta
//            emf.close();
        }

        // Decimos al JTable el modelo a usar
        jTable1.setModel(modelo);

    }

    private static String formatearFecha(Date fecha) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        return sdf.format(fecha);
    }

    private static String formatearHora(Date hora) {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        return sdf.format(hora);
    }

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void jBtnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnVolverActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtnVolverActionPerformed

    private void jBtnComprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnComprobarActionPerformed
        // TODO add your handling code here:
        //si hay un campo seleccionado
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0) {
            Integer idTicket = (Integer) jTable1.getValueAt(selectedRow, 0);

            EntityManager em = emf.createEntityManager();
            try {
                Tickets ticket = tjc.findTickets(idTicket);
                if (ticket != null) {
                    new VentanaDetallesTicket(panelMain, true, ticket).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró el ticket seleccionado.");
                }
            } finally {
                em.close();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un ticket para comprobar.");
        }

    }//GEN-LAST:event_jBtnComprobarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnComprobar;
    private javax.swing.JButton jBtnVolver;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
